{"version":3,"sources":["components/User.js","components/TodoItems.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","name","TodoItems","data","title","components_User","user","concat","completed","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","requested","loaded","loadItems","bind","assertThisInitialized","sortItems","url","fetch","then","resolve","json","_this2","setState","Promise","all","loadApi","_ref","_ref2","slicedToArray","todos","users","map","item","objectSpread","find","userId","id","event","field","target","closest","dataset","sort","b","localeCompare","toString","className","onClick","data-field","components_TodoItems","key","Component","App","src_components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02efa02e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User(props) {\r\n  return (\r\n    <td>{props.name}</td>\r\n  );\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport User from './User';\r\nimport './TodoItems.css';\r\n\r\nfunction TodoItems(props) {\r\n  return (\r\n    <tr>\r\n      <td>{props.data.title}</td>\r\n      <User name={props.data.user.name} />\r\n      <td>{`${props.data.completed}`}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default TodoItems;","import React, {Component} from 'react';\r\nimport './TodoList.css';\r\nimport TodoItems from './TodoItems';\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      requested: false,\r\n      loaded: false,\r\n      data: []\r\n    };\r\n\r\n    this.loadItems = this.loadItems.bind(this);\r\n    this.sortItems = this.sortItems.bind(this);\r\n  }\r\n\r\n  loadApi(url) {\r\n    return fetch(url)\r\n      .then(resolve => resolve.json())\r\n      .then(data => data);\r\n  }\r\n\r\n  loadItems() {\r\n    this.setState({\r\n      requested: true\r\n    });\r\n\r\n    Promise.all([\r\n      this.loadApi('https://jsonplaceholder.typicode.com/todos'),\r\n      this.loadApi('https://jsonplaceholder.typicode.com/users')\r\n    ])\r\n      .then(([todos, users]) => this.setState({\r\n        loaded: true,\r\n        data: todos.map((item) => ({\r\n          ...item,\r\n          user: users.find((user) => item.userId === user.id)\r\n        }))\r\n      }));\r\n  }\r\n\r\n  sortItems(event) {\r\n    const field = event.target.closest('th').dataset.field;\r\n\r\n    this.setState((state) => ({\r\n      data: state.data.sort((a, b) => {\r\n        switch (field) {\r\n          case 'title':\r\n            return a.title.localeCompare(b.title);\r\n          case 'completed':\r\n            return a.completed.toString().localeCompare(b.completed.toString());\r\n          case 'name':\r\n            return a.user.name.localeCompare(b.user.name);\r\n          default:\r\n            return event.target;\r\n        }\r\n      })\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.requested) {\r\n      return <button onClick={this.loadItems}>Load</button>;\r\n    } else if (this.state.loaded) {\r\n      return (\r\n        <div className=\"todos-list\">\r\n          <table>\r\n            <tbody>\r\n            <tr onClick={this.sortItems}>\r\n              <th data-field=\"title\">Title</th>\r\n              <th data-field=\"name\">User name</th>\r\n              <th data-field=\"completed\">Completed</th>\r\n            </tr>\r\n            {this.state.data.map(item => <TodoItems key={item.title} data={item} />)}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <button>Loading...</button>\r\n    }\r\n  }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoItems from \"./components/TodoItems\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}